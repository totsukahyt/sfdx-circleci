処理概要
　画像はスマホなどで撮影されたものを対象とします（一般的に縦横比は３：４を前提とします）。
　画面に表示するサイズは640×480とし、名刺画像は600×360とします。
　撮影した画像について、cannyフィルターを用いてエッジ抽出を行います（よい結果を得ることができますが、処理時間はかかります）。laplacianフィルターは高速処理が可能なエッジ抽出フィルターで、当初来種々のフィルターのパターンを検討しました。しかし、laplacianフィルターは濃い目の画像となり、後続の輪郭線抽出に悪影響をもたらしました。最終的にcannyフィルターとしました。エッジ抽出画像を太らせ、その後細線化を行いました。potraceで線のベクター化を行う中で、伸びやかな線以外を除外等をし、名刺の輪郭線を得ました。輪郭に基づき、射影変換を実施します。尚、射影変換の元画像は1280×960の画像としました。

処理の流れ
１．撮影／ファイル選択
　　　　↓　　　　↑　↑　↑
    画像の表示ーー　　↑　↑
　　　　↓　　　　　　↑　↑
２．処理の実施　　　　↑　↑
　　　　↓　　　　　　↑　↑
    結果表示ーーーーー　　↑
　　　　↓　　　　　　　　↑
３．ファイル転送　　　　　↑
　　　　↓　　　　　　　　↑
　　転送ーーーーーーーーー

モジュール構成
ip.html         本プログラムのメイン
    lib/transform.js            処理のメインもージュール
    lib/StringUtil.js           テキストモジュール
    lib/clone.js                クローンモジュール
    lib/outline.js              輪郭抽出モジュール
    lib/thin.js                 細線化モジュール（outline.jsで利用）
    lib/potrace.js              線のベクトル化モジュール
    lib/homography.js           射影変換モジュール
    lib/glMatrix-0.9.5.min.js   マトリックモジュール（homography.jsで利用）
readme.txt      本テキスト

プログラムでのポイント
・canvasについて
	<div id="take_img">
		<canvas id="canvas"></canvas>							<!-- 画像表示及び画像処理の元画像用キャンバス -->
		<canvas id="canvas_h" style="display: none;"></canvas>	<!-- 変換元画像用キャンバス -->
		<canvas id="canvas_t"></canvas>							<!-- 変換処理用キャンバス -->
	</div>
　divの中に３つのcanvas要素があり、それぞれの役目の画像を表示します。
　id=canvasは、撮影した画像の確認や画像処理の元画像となります。
　id=canvas_hは変換画像の画質に影響します。この画像の大きさなはip.html中のBAIRITUで指定します。
　BAIRITUは現在4、即ち640×480に対して、2560×1920となっています。後続のOCR処理との相談となりますが、BAIRITU=2でもよいのでは、と思います。
　id=canvas_tは、変換結果を表示している画像で、この画像をサーバーにアップロードします。
