version: 2.1
orbs:
  sfdx: circleci/salesforce-sfdx@2.1.0
  slack: circleci/slack@3.4.2

####################################################################################################
## JOB:     build-and-test
## PURPOSE:
####################################################################################################
jobs:
  build-and-test:
    executor: sfdx/default
    # machine: true
    working_directory: ~/smartvisca-lead-package
    steps:
      - checkout
      - sfdx/install:
          version: "7.69.0"
      #　DEV環境認証開始
      - run:
          name: create DEV org server key
          command : |
            if [ $CIRCLE_PULL_REQUEST ]; then
              openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K ${DECRYPTION_KEY} -iv ${DECRYPTION_IV}
            # else
            #   exit 0
            # fi
      - run: 
          name: DEV jwt
          command : | 
            if [ $CIRCLE_PULL_REQUEST ]; then
              sfdx force:auth:jwt:grant --clientid ${HUB_CONSUMER_KEY} --jwtkeyfile assets/server.key --username ${HUB_SFDC_USER} --setdefaultdevhubusername --setalias DEV-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}
            # else
            #   exit 0
            # fi
      #　DEV環境認証完了
      - run:
          name: Setup Org
          command: |
            if [ $CIRCLE_PULL_REQUEST ]; then
              echo 'Test scratch環境の作成 '
              sfdx force:limits:api:display -u DEV-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}
              sfdx force:org:create -f ~/smartvisca-lead-package/config/project-scratch-def.json -a circle_build_test -s -d 1 --wait 5
              # 下記SmartVscaのバージョン：2.5.2
              sfdx force:package:install --package 04t10000000jwLWAAY -s AllUsers -u circle_build_test -k sb202006 --publishwait 6 --wait 10
              sfdx force:source:push -u circle_build_test
              sfdx force:user:create --setalias ${CIRCLE_WORKFLOW_ID}@test.org --definitionfile config/project-user-admin-def.json
            # else
            #   exit 0
            # fi
      - run:
          name: Run Apex Tests
          command: |
            if [ $CIRCLE_PULL_REQUEST ]; then
              echo 'Running Apex Tests'
              mkdir -p ~/junit
              sfdx force:apex:test:run -c -d ~/junit -r junit -u ${CIRCLE_WORKFLOW_ID}@test.org --wait 5
              echo 'export TESTMSG_HEAD=$(echo Unit Test が正常に完了しました。)' >> $BASH_ENV
              source $BASH_ENV
            else
              echo 'export TESTMSG_HEAD=$(echo PRを出していない場合、Unit Test が実行しません。)' >> $BASH_ENV
              source $BASH_ENV
              exit 0
            fi

      - store_test_results:
          path: ~/junit

      - run:
          name: Delete Useless Scratch Org
          command: |
            if [ $CIRCLE_PULL_REQUEST ]; then
              sfdx force:org:delete -u circle_build_test -p
            # else
            #   exit 0
            # fi

      - slack/notify:
          channel: ${SLACK_CHANNEL}
          color: '#42e2f4'
          message: "${TESTMSG_HEAD} \n 名前：$CIRCLE_USERNAME \n ブランチ：${CIRCLE_BRANCH}"
          webhook: '${SLACK_WEBHOOK}'
          include_job_number_field: false

      - slack/status:
          fail_only: true
          channel: ${SLACK_CHANNEL}
          webhook: '${SLACK_WEBHOOK}'
          failure_message: "名前：$CIRCLE_USERNAME \n ブランチ：$CIRCLE_BRANCH \n CIRCLE JOB が失敗しました。確認してください。"

####################################################################################################
## JOB:     create-feature-scratch
## PURPOSE:
####################################################################################################
  create-feature-scratch:
    executor: sfdx/default
    docker:
      - image: circleci/node:current-browsers
    # machine: true
    working_directory: ~/smartvisca-lead-package
    steps:
      - checkout
      - sfdx/install:
          version: "7.69.0"
      #　DEV環境認証開始
      - run: 
          name: create server key 
          command: openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K ${DECRYPTION_KEY} -iv ${DECRYPTION_IV}
      - run: 
          name: DEV jwt
          command: sfdx force:auth:jwt:grant --clientid ${HUB_CONSUMER_KEY} --jwtkeyfile assets/server.key --username ${HUB_SFDC_USER} --setdefaultdevhubusername --setalias DEV-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}
      #　DEV環境認証完了

      - run:
          name: create-feature-scratch
          command: |
            sfdx force:data:soql:query -q "SELECT Name,OrgName,ScratchOrg,Description FROM ScratchOrgInfo WHERE status = 'Active' AND OrgName = '$CIRCLE_BRANCH'" -u DEV-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} | wc -l > scratchorg.cnt
            cat scratchorg.cnt
            SCRATCH_CNT=$(cat scratchorg.cnt)
            echo "scratch:count=${SCRATCH_CNT}"
            echo "'$CIRCLE_BRANCH'"
            echo "${CIRCLE_BRANCH}"
            if [ "${SCRATCH_CNT}" = "1" ]; then
              echo 'Featrue scratch環境の作成 '

              sfdx force:org:create -f config/project-scratch-def.json orgName=${CIRCLE_BRANCH} -a ${CIRCLE_BRANCH} -s -d 30  --wait 10
              # 下記SmartVscaのバージョン：2.5.2
              sfdx force:package:install --package 04t10000000jwLWAAY -s AllUsers -u ${CIRCLE_BRANCH} -k sb202006 --publishwait 6 --wait 10
              sfdx force:source:push -u ${CIRCLE_BRANCH}
              sfdx force:user:create --setalias ${CIRCLE_WORKFLOW_ID}@feature.org --definitionfile config/project-user-admin-def.json
              sfdx force:user:password:generate -u ${CIRCLE_WORKFLOW_ID}@feature.org
              sfdx force:user:display --targetusername ${CIRCLE_WORKFLOW_ID}@feature.org | sed '1,3d' > ./dev_userPassword.txt
              cat ./dev_userPassword.txt
              echo 'export VERY_IMPORTANT=$(cat ./dev_userPassword.txt)' >> $BASH_ENV
              source $BASH_ENV
            else
              echo 'すでに環境が作成されています。'
              echo 'export DEVMSG_HEAD=$(echo 当ブランチで既に環境が作成されています。)' >> $BASH_ENV
              source $BASH_ENV
            fi

      - slack/notify:
          channel: ${SLACK_CHANNEL}
          color: '#42e2f4'
          message: "${DEVMSG_HEAD} \n ブランチ：${CIRCLE_BRANCH} \n ${VERY_IMPORTANT}"
          webhook: '${SLACK_WEBHOOK}'
          include_job_number_field: false
      
      - slack/status:
          fail_only: true
          channel: ${SLACK_CHANNEL}
          webhook: '${SLACK_WEBHOOK}'
          failure_message: "名前：$CIRCLE_USERNAME \n ブランチ：$CIRCLE_BRANCH \n CIRCLE JOB が失敗しました。確認してください。"

####################################################################################################
## JOB:     create-beta-package
## PURPOSE:
####################################################################################################
  create-beta-package:
    executor: sfdx/default
    docker:
      - image: circleci/node:current-browsers
    steps:
      - checkout
      - sfdx/install:
          version: "7.69.0"
      
      - run:
          name: create date files
          command: |
            TODAY=$(date +%u)
            # 今週の月曜日を取得
            if [ 1 -lt TODAY]; then
              echo $(date "+%s" --date "last monday") > ./monday.txt
            else
              echo $(date "+%s") > ./monday.txt
            fi
            # 最新のcommit日を取得
            echo $(git log -1 --date=format:"%s" --format="%ad") > ./commit_date.txt
            # betaパッケージパージョン名
            echo $(date '+%Y%m%d') > ./version_name.txt

      #　PJT環境認証開始
      - run: 
          name: create PKG org server key
          command: |
            #if [ $(cat monday.txt) -lt $(cat commit_date.txt) ]; then
              openssl enc -nosalt -aes-256-cbc -d -in assets/server_pkg.key.enc -out assets/server_pkg.key -base64 -K ${PKGORG_DECRYPTION_KEY} -iv ${PKGORG_DECRYPTION_IV}
            # else
            #   exit 0
            # fi
      - run: 
          name: PKG jwt
          command: |
            #if [ $(cat monday.txt) -lt $(cat commit_date.txt) ]; then
              sfdx force:auth:jwt:grant --clientid ${PKGORG_CONSUMER_KEY} --jwtkeyfile assets/server_pkg.key --username ${PKGORG_SFDC_USERNAME} --setdefaultdevhubusername --setalias PKG-${CIRCLE_PROJECT_REPONAME}-BETA
            # else
            #   exit 0
            # fi
      #　PJT環境認証完了
      #　DEV環境認証開始
      - run: 
          name: create DEV org server key
          command: |
            #if [ $(cat monday.txt) -lt $(cat commit_date.txt) ]; then
              openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K ${DECRYPTION_KEY} -iv ${DECRYPTION_IV}
            # else
            #   exit 0
            # fi
      - run: 
          name: DEV jwt
          command: |
            #if [ $(cat monday.txt) -lt $(cat commit_date.txt) ]; then
              sfdx force:auth:jwt:grant --clientid ${HUB_CONSUMER_KEY} --jwtkeyfile assets/server.key --username ${HUB_SFDC_USER} --setdefaultdevhubusername --setalias DEV-${CIRCLE_PROJECT_REPONAME}-BETA
            # else
            #   exit 0
            # fi
      #　DEV環境認証完了
      - run:
          name: Convert SFDX source to MDAPI source
          command: |
            #if [ $(cat monday.txt) -lt $(cat commit_date.txt) ]; then
              sfdx force:source:convert -r "$PACKAGE_DIRECTORY" \
                                        -d "./mdapi-source/circle_build_$CIRCLE_BUILD_NUM" \
                                        -n "$PACKAGE_NAME" \
                                        --loglevel error
            # else
            #   exit 0
            # fi

      - run:
          name: Deploy MDAPI Source to the Packaging Org
          command: |
            #if [ $(cat monday.txt) -lt $(cat commit_date.txt) ]; then
              sfdx force:mdapi:deploy -d "./mdapi-source/circle_build_$CIRCLE_BUILD_NUM" \
                                      -u PKG-${CIRCLE_PROJECT_REPONAME}-BETA \
                                      -w 15 \
                                      --verbose \
                                      --loglevel error
            # else
            #   exit 0
            # fi

      - run:
          name: List current version history for the first-generation package about to be uploaded
          command: |
            #if [ $(cat monday.txt) -lt $(cat commit_date.txt) ]; then
              sfdx force:package1:version:list -u PKG-${CIRCLE_PROJECT_REPONAME}-BETA \
                                               -i $METADATA_PACKAGE_ID \
                                               --loglevel error
            # else
            #   exit 0
            # fi
 
      - run:
          name: Create (upload) a new MANAGED BETA package version
          command: |
            #if [ $(cat monday.txt) -lt $(cat commit_date.txt) ]; then
              sfdx force:package1:version:create -i $METADATA_PACKAGE_ID \
                                                 -n "$PACKAGE_VERSION_NAME" \
                                                 -d "Package version generated by CI process" \
                                                 -u PKG-${CIRCLE_PROJECT_REPONAME}-BETA \
                                                 -w 15 \
                                                 --loglevel error > ./versionId.txt
              sfdx force:package1:version:list -u PKG-${CIRCLE_PROJECT_REPONAME}-BETA \
                                               -i $METADATA_PACKAGE_ID \
                                               --loglevel error
              VID=$(cat ./versionId.txt)
              echo 'VID1 : ' ${VID}
              VID=`echo ${VID#*[}`
              echo 'VID2 : ' ${VID}
              VID=`echo ${VID%]*}`
              echo 'VID3 : ' ${VID}
              echo 'export VERSIONID_ENV=${VID}' >> $BASH_ENV
              source $BASH_ENV
              echo 'QA scratch環境の作成 '
              # sfdx force:org:create -f config/project-scratch-def.json orgName=${CIRCLE_WORKFLOW_ID}-qa-test -a qa-test -n -s -d 30 --wait 10
              # sfdx force:org:list --all
              # sfdx force:user:password:generate -u qa-test
              # sfdx force:user:display --targetusername qa-test --json > qa_userPassword.json
              # cat ./qa_userPassword.json
              # echo 'export QAVERY_IMPORTANT=$(cat ./qa_userPassword.json)' >> $BASH_ENV
              # echo 'export QAMSG_HEAD=$(echo ベターパッケージ QA scratch環境を作成しました。)' >> $BASH_ENV
              # source $BASH_ENV

              # # 下記SmartVscaのバージョン：2.5.2
              # sfdx force:package:install --package 04t10000000jweM -s AllUsers -u qa-test -k sb202008 --publishwait 6 --wait 10
              # sfdx force:package:install --package $VERSIONID_ENV -u qa-test --publishwait 6 --wait 10
              # sfdx force:user:password:generate -u qa-test
              
            # else
            #   exit 0
            # fi

      - run:
          name: create and push beta tag
          command: |
            #if [ $(cat monday.txt) -lt $(cat commit_date.txt) ]; then
              # betaパッケージパージョン名
              VERSION_NAME=$(cat version_name.txt)
              # betaタグを作成　例：beta_1.0.0_20200819
              PKG_INFO=$(cat pkg_info.txt)
              if [[ $PKG_INFO =~ [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ]]; then
                PKG_VERSION=${BASH_REMATCH[0]}
              fi
              TAG_HEAD=$(echo beta_)
              UB=$(echo _)
              BETA_TAG=$(echo $TAG_HEAD$PKG_VERSION$UB${VERSION_NAME})
              git tag $BETA_TAG
              git push origin $BETA_TAG
            # else
            #   exit 0
            # fi

      - run:
          name: initial setting in Lead-package
          command: |
            #if [ $(cat monday.txt) -lt $(cat commit_date.txt) ]; then
              sfdx force:source:deploy -p "sfdx-source/unpackaged" \
                                      -u  qa-test \
                                      -w 15 \
                                      --verbose \
                                      --loglevel error

              sfdx force:apex:execute -u  qa-test -f script/apex/SB_AutomaticcCooperationSetting.apex
              npm install
              npx mocha script/e2e/SmartViscaInitialSetting.js --timeout 20000
              #テストレコードの挿入
              sfdx force:user:create --setalias test1-${CIRCLE_WORKFLOW_ID}@package.org --definitionfile data/test-users/svdemo_cxo2019.qlz4law5ydzk.bkmfhh1acnzi@sv.com.json
              sfdx force:user:create --setalias test2-${CIRCLE_WORKFLOW_ID}@package.org --definitionfile data/test-users/svdemo_mktg2019.xltvyt2mceva.uo598j4fqxu8@sv.com.json
              sfdx force:user:create --setalias test1-${CIRCLE_WORKFLOW_ID}@package.org --definitionfile data/test-users/svdemo_sales2019.qmwtyalmpjol.o9x6vrua3tos@sv.com.json
              sfdx force:user:create --setalias test1-${CIRCLE_WORKFLOW_ID}@package.org --definitionfile data/test-users/svdemo_salesmgr2019.shqp9lpwtmwl.n4al68ywrcoq@sv.com.json
              sfdx force:data:tree:import -p data/test-records/SmartViscaf__NameCard__c-Account-Contact-plan.json -u  qa-test

              # テストユーザの作成
              sfdx force:user:create --setalias qa-${CIRCLE_WORKFLOW_ID}@package.org --definitionfile config/project-user-general-def.json
              sfdx force:user:password:generate -u qa-${CIRCLE_WORKFLOW_ID}@package.org

              sfdx force:user:display --targetusername qa-${CIRCLE_WORKFLOW_ID}@package.org
            # else
            #   exit 0
            # fi

      - slack/notify:
          channel: ${SLACK_CHANNEL}
          color: '#42e2f4'
          message: "${QAMSG_HEAD} \n タグ：qa-test \n ${QAVERY_IMPORTANT}"
          webhook: '${SLACK_WEBHOOK}'
          include_job_number_field: false

      - slack/status:
          fail_only: true
          channel: ${SLACK_CHANNEL}
          webhook: '${SLACK_WEBHOOK}'
          failure_message: "名前：$CIRCLE_USERNAME \n タグ：$CIRCLE_TAG \n CIRCLE JOB が失敗しました。確認してください。"


####################################################################################################
## workflows
##  commit-workflow
##    build-and-test          PR発行した場合実行
##    create-feature-scratch  featureブランチで実行
##  scheduled-workflow
##    create-beta-package     pre-productionブランチで、毎週月曜零時（「0 15 * * 0」はUTCの毎週日曜日の
##                            午後3時、JSTの毎週月曜零時です）から実行、この一週間マージがないの場合、ジョブ
##                            処理しません
####################################################################################################
workflows:
  version: 2.1
  commit-workflow:
    jobs:
      - create-beta-package