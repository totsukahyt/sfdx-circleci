version: 2.1
orbs:
  sfdx: circleci/salesforce-sfdx@2.0.0
  slack: circleci/slack@3.4.2

####################################################################################################
## JOB:     build-and-test
## PURPOSE:
####################################################################################################
jobs:
  build-and-test:
    executor: sfdx/default
    docker:
      - image: circleci/node:current-browsers
    # machine: true
    working_directory: ~/smartvisca-lead-package
    steps:
      - checkout
      - sfdx/install:
          version: "7.69.0"
      #　DEV環境認証開始
      - run:
          name: create DEV org server key
          command : |
            if [ $CIRCLE_PULL_REQUEST ]; then
              openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K ${DECRYPTION_KEY} -iv ${DECRYPTION_IV}
            else
              exit 0
            fi
      - run: 
          name: DEV jwt
          command : | 
            if [ $CIRCLE_PULL_REQUEST ]; then
              sfdx force:auth:jwt:grant --clientid ${HUB_CONSUMER_KEY} --jwtkeyfile assets/server.key --username ${HUB_SFDC_USER} --setdefaultdevhubusername --setalias DEV-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}
            else
              exit 0
            fi
      #　DEV環境認証完了
      - run:
          name: Setup Org
          command: |
            if [ $CIRCLE_PULL_REQUEST ]; then
              echo 'Test scratch環境の作成 '
              sfdx force:limits:api:display -u DEV-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}
              sfdx force:org:create -f ~/smartvisca-lead-package/config/project-scratch-def.json -a circle_build_test -s -d 1 --wait 5
              # 下記SmartVscaのバージョン：2.5.2
              sfdx force:package:install --package 04t10000000jwLWAAY -s AllUsers -u circle_build_test -k sb202006 --publishwait 6 --wait 10
              sfdx force:source:push -u circle_build_test
              sfdx force:user:create --setalias ${CIRCLE_WORKFLOW_ID}@test.org --definitionfile config/project-user-admin-def.json
            else
              exit 0
            fi
      - run:
          name: Run Apex Tests
          command: |
            if [ $CIRCLE_PULL_REQUEST ]; then
              echo 'Running Apex Tests'
              mkdir -p ~/junit
              sfdx force:apex:test:run -c -d ~/junit -r junit -u ${CIRCLE_WORKFLOW_ID}@test.org --wait 5
              echo 'export TESTMSG_HEAD=$(echo Unit Test が正常に完了しました。)' >> $BASH_ENV
              source $BASH_ENV
            else
              echo 'export TESTMSG_HEAD=$(echo PRを出していない場合、Unit Test が実行しません。)' >> $BASH_ENV
              source $BASH_ENV
              exit 0
            fi

      - store_test_results:
          path: ~/junit

      - run:
          name: Delete Useless Scratch Org
          command: |
            if [ $CIRCLE_PULL_REQUEST ]; then
              sfdx force:org:delete -u circle_build_test -p
            else
              exit 0
            fi

      - slack/notify:
          channel: ${SLACK_CHANNEL}
          color: '#42e2f4'
          message: "${TESTMSG_HEAD} \n 名前：$CIRCLE_USERNAME \n ブランチ：${CIRCLE_BRANCH}"
          webhook: '${SLACK_WEBHOOK}'
          include_job_number_field: false

      - slack/status:
          fail_only: true
          channel: ${SLACK_CHANNEL}
          webhook: '${SLACK_WEBHOOK}'
          failure_message: "名前：$CIRCLE_USERNAME \n ブランチ：$CIRCLE_BRANCH \n CIRCLE JOB が失敗しました。確認してください。"

####################################################################################################
## JOB:     create-feature-scratch
## PURPOSE:
####################################################################################################
  create-feature-scratch:
    docker:
      - image: ncino/ci-sfdx
    # machine: true
    working_directory: ~/smartvisca-lead-package
    steps:
      - checkout
      - sfdx/install:
          version: "7.69.0"
      #　DEV環境認証開始
      - run: 
          name: create server key 
          command: openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 -K ${DECRYPTION_KEY} -iv ${DECRYPTION_IV}
      - run: 
          name: DEV jwt
          command: sfdx force:auth:jwt:grant --clientid ${HUB_CONSUMER_KEY} --jwtkeyfile assets/server.key --username ${HUB_SFDC_USER} --setdefaultdevhubusername --setalias DEV-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}
      #　DEV環境認証完了

      - run:
          name: create-feature-scratch
          command: |
            sfdx force:data:soql:query -q "SELECT Name,OrgName,ScratchOrg,Description FROM ScratchOrgInfo WHERE status = 'Active' AND OrgName = '$CIRCLE_BRANCH'" -u DEV-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH} | wc -l > scratchorg.cnt
            cat scratchorg.cnt
            SCRATCH_CNT=$(cat scratchorg.cnt)
            echo "scratch:count=${SCRATCH_CNT}"
            echo "'$CIRCLE_BRANCH'"
            echo "${CIRCLE_BRANCH}"
            if [ "${SCRATCH_CNT}" = "1" ]; then
              echo 'Featrue scratch環境の作成 '

              sfdx force:org:create -f config/project-scratch-def.json orgName=${CIRCLE_BRANCH} -a ${CIRCLE_BRANCH} -s -d 30  --wait 10
              # 下記SmartVscaのバージョン：2.5.2
              sfdx force:package:install --package 04t10000000jwLWAAY -s AllUsers -u ${CIRCLE_BRANCH} -k sb202006 --publishwait 6 --wait 10
              sfdx force:source:push -u ${CIRCLE_BRANCH}
              sfdx force:user:create --setalias ${CIRCLE_WORKFLOW_ID}@feature.org --definitionfile config/project-user-admin-def.json
              sfdx force:user:password:generate -u ${CIRCLE_WORKFLOW_ID}@feature.org
              sfdx force:user:display --targetusername ${CIRCLE_WORKFLOW_ID}@feature.org | sed '1,3d' > ./dev_userPassword.txt
              cat ./dev_userPassword.txt
              echo 'export VERY_IMPORTANT=$(cat ./dev_userPassword.txt)' >> $BASH_ENV
              source $BASH_ENV
            else
              echo 'すでに環境が作成されています。'
              echo 'export DEVMSG_HEAD=$(echo 当ブランチで既に環境が作成されています。)' >> $BASH_ENV
              source $BASH_ENV
            fi

      - slack/notify:
          channel: ${SLACK_CHANNEL}
          color: '#42e2f4'
          message: "${DEVMSG_HEAD} \n ブランチ：${CIRCLE_BRANCH} \n ${VERY_IMPORTANT}"
          webhook: '${SLACK_WEBHOOK}'
          include_job_number_field: false
      
      - slack/status:
          fail_only: true
          channel: ${SLACK_CHANNEL}
          webhook: '${SLACK_WEBHOOK}'
          failure_message: "名前：$CIRCLE_USERNAME \n ブランチ：$CIRCLE_BRANCH \n CIRCLE JOB が失敗しました。確認してください。"

####################################################################################################
## JOB:     create-beta-package
## PURPOSE:
####################################################################################################
  create-beta-package:
    docker:
      - image: circleci/node:current-browsers
    steps:
      - checkout
      - sfdx/install:
          version: "7.69.0"
      

      - run:
          name: test
          command: |
            npm install
            npx mocha script/e2e/SmartViscaInitialSetting.js --timeout 0


      - slack/notify:
          channel: ${SLACK_CHANNEL}
          color: '#42e2f4'
          message: "${QAMSG_HEAD} \n タグ：${CIRCLE_TAG} \n ${QAVERY_IMPORTANT}"
          webhook: '${SLACK_WEBHOOK}'
          include_job_number_field: false

      - slack/status:
          fail_only: true
          channel: ${SLACK_CHANNEL}
          webhook: '${SLACK_WEBHOOK}'
          failure_message: "名前：$CIRCLE_USERNAME \n タグ：$CIRCLE_TAG \n CIRCLE JOB が失敗しました。確認してください。"

workflows:
  # version: 2.1
  all_jobs:
    jobs:
      - build-and-test
          # context: org-sbdevhub
      - create-feature-scratch:
          # context: org-sbdevhub
          filters:
            branches:
              only: /^feature.*/
      - create-beta-package:
          # context: org-sbdevhub
          filters:
            tags:
              only: /^beta.*/
            branches:
              ignore: /.*/